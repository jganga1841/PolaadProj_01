"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("@angular/core");
/**
 * @name mdDivider
 *
 * @description
 * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.
 *
 * @param {boolean=} md-inset Add this attribute to activate the inset divider style.
 * @usage
 * <hljs lang="html">
 * <md-divider></md-divider>
 *
 * <md-divider md-inset></md-divider>
 * </hljs>
 *
 */
var MdDivider = (function () {
    function MdDivider() {
    }
    return MdDivider;
}());
MdDivider = __decorate([
    core_1.Component({
        selector: 'md-divider',
        template: '',
        encapsulation: core_1.ViewEncapsulation.None
    })
], MdDivider);
var MdDividerModule = (function () {
    function MdDividerModule() {
    }
    return MdDividerModule;
}());
MdDividerModule = __decorate([
    core_1.NgModule({
        declarations: [MdDivider],
        exports: [MdDivider]
    })
], MdDividerModule);
exports.MdDividerModule = MdDividerModule;
//# sourceMappingURL=divider.js.map